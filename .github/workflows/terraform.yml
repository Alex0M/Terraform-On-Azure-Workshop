name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

env:
  ARM_CLIENT_ID: ${{ secrets.TF_SP_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.TF_SP_PASS }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.25

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var 'env_prefix=${{ secrets.ENV_PREFIX }}' -var 'sqlserver_login=${{ secrets.SQLSERVER_LOGIN }}' -var 'sqlserver_pass=${{ secrets.SQLSERVER_PASS }}' -var 'mongo_root_user=${{ secrets.MONGO_ROOT_USER }}' -var 'mongo_root_pass=${{ secrets.MONGO_ROOT_PASS }}'
          
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -var 'env_prefix=${{ secrets.ENV_PREFIX }}' -var 'sqlserver_login=${{ secrets.SQLSERVER_LOGIN }}' -var 'sqlserver_pass=${{ secrets.SQLSERVER_PASS }}' -var 'mongo_root_user=${{ secrets.MONGO_ROOT_USER }}' -var 'mongo_root_pass=${{ secrets.MONGO_ROOT_PASS }}'

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: terraform

    # Azure Login with Service Principal
    steps:
    - name: Azure Login 
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.TF_SP_ID }}","clientSecret":"${{ secrets.TF_SP_PASS }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

    #Run Azure CLI scripts for deploying app
    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az webapp deployment source config --branch master --manual-integration --name webappservice-${{ secrets.ENV_PREFIX }} --repo-url https://github.com/Alex0M/AzureEats-Website --resource-group resources-${{ secrets.ENV_PREFIX }} 
    
    # Azure logout 
    - name: Azure Logout
      run: |
        az logout